---
import ButtonOpenMenu from './ButtonOpenMenu.astro'
import Menu from './Menu.astro'
import type { MenuLink } from '@custom-types/global'

interface Props {
  links: MenuLink[]
  class?: string | null | undefined
}

const { links, class: className } = Astro.props
---

<nav
  id='Navigation'
  class:list={[
    'fixed top-0 right-0 left-0 z-[9] mx-auto max-w-[1440px] transition-transform duration-200 ease-in-out lg:top-8 lg:px-16 xl:px-32',
    className,
  ]}>
  <div class='py-8 px-6 flex bg-gray-1000/50 backdrop-blur-3xl'>
    <ButtonOpenMenu />
  </div>
</nav>
<Menu links={links} />

<script>
  import type { AstroNode } from '@custom-types/global'

  function updateNavClassByScroll() {
    const navComponent: AstroNode = document.querySelector('#Navigation')

    if (!navComponent) return

    const navComponentHeight = navComponent.getBoundingClientRect()
    const height = navComponentHeight.height || 90
    let lastScroll = 0

    window.addEventListener('scroll', () => {
      const currentScroll = window.scrollY

      // Baja
      if (currentScroll > lastScroll && currentScroll > height) {
        navComponent.classList.remove('translate-y-0')
        navComponent.classList.add('-translate-y-[calc(100%+2rem)]')
        navComponent.firstElementChild?.classList.remove('lg:border', 'lg:border-gray-600')
      }

      // Sube
      if (currentScroll < lastScroll) {
        navComponent.classList.replace('-translate-y-[calc(100%+2rem)]', 'translate-y-0')
        navComponent.firstElementChild?.classList.add('lg:border', 'lg:border-gray-600')
      }

      // Inicio del scroll
      if (currentScroll === 0) {
        navComponent.firstElementChild?.classList.remove('lg:border', 'lg:border-gray-600')
      }

      lastScroll = currentScroll
    })
  }

  updateNavClassByScroll()
</script>
