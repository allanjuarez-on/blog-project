---
import { getCollection, getEntries } from 'astro:content'
import { Image } from 'astro:assets'
import ArticleCard from './ArticleCard.astro'
import Link from '../Link.astro'
import WithoutContent from '../WithoutContent.astro'
import NoContent from '@assets/nocontent.svg'

// Las content collections de Astro permiten recuperar datos de tres maneras:
// 1. getCollections() -> Obtiene una colección entera
// 2. getEntry() -> Recupera un elemento de una colección.
// 3. getEntries() -> Recupera uno o varios datos refenciados

async function getArticles() {
  const rawArticles = await getCollection('articles')
  const articles = rawArticles.map(async raw => {
    const rawAuthors = await getEntries(raw.data.authors)
    return {
      id: raw.id,
      data: {
        ...raw.data,
        authors: [...rawAuthors],
      },
    }
  })

  return Promise.allSettled(articles).then(results => results)
}

const allArticles = await getArticles()
---

<Image id='NoContent' class='hidden' src={NoContent} alt='' />
<div id='Content' class='flex flex-col gap-12 z-0 pb-16'>
  {
    allArticles &&
      allArticles.length !== 0 &&
      allArticles.map(results => {
        return results.status !== 'fulfilled' ? (
          <WithoutContent data-card-category={'no-content'} />
        ) : (
          <Link
            type='local'
            href={`blog/${results.value.id}`}
            class='hidden'
            data-card-category={results.value.data.category.id}>
            <ArticleCard {...results.value.data} />
          </Link>
        )
      })
  }
</div>

<script>
  import { toggleActiveCard, checkVisibleCards } from '@lib/dom/blog'
  import type { UrlChangeEventData } from '@custom-types/global'

  const cards = document.querySelectorAll('a[data-card-category], div[data-card-category]')

  // Por defecto las etiquetas script en Astro esperan a que sea cargue todo el HTML, de esta manera no se necesita del evento "load"
  function syncUIByUrlParams(
    nodes: NodeListOf<Element>,
    currentFilter?: string | null | undefined,
  ) {
    const filter = currentFilter || new URL(window.location.href).searchParams.get('category')
    toggleActiveCard(nodes, filter)
  }

  syncUIByUrlParams(cards)
  checkVisibleCards(cards)

  window.addEventListener('changeUrl', e => {
    const changeUrlEvent = e as CustomEvent<UrlChangeEventData> // Type assertion
    syncUIByUrlParams(cards, changeUrlEvent.detail.payload)
    checkVisibleCards(cards)
  })
</script>
