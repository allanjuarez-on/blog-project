---
import Icon from '@components/Icon.astro'

const { code, ...props } = Astro.props
// Se genero un ID para que cada boton tenga su propia logica y no exista algún error de ID duplicados.
// Math.random().toString(36).substr(2, 9)
const buttonId = `copy-btn-${crypto.randomUUID().slice(0, 8)}`
---

<button id={buttonId} class='group flex lg:cursor-pointer' {...props}>
  <Icon iconName='Copy' class='bg-gray-1000' />
  <span
    class='hidden absolute bottom-[112%] right-[0] px-2 py-0.5 rounded-full border-1 border-gray-600 font-mono text-nowrap text-gray-50 bg-gray-1000/50 backdrop-blur-sm group-hover:lg:block'
    >Copiar código</span
  >
</button>

<script is:inline define:vars={{ codeData: code, buttonId }}>
  const ArticleLayout = document.querySelector('#ArticleLayout')
  const copyButton = document.getElementById(buttonId)
  const copyButtonBadge = copyButton.querySelector('span')
  const originalTextBadge = copyButtonBadge.textContent ?? ''

  let isClickable = true

  // Crea un nuevo componenete de notificación con id, mensaje y estilos personalizables.
  function initNotificationComponent({
    message = 'Notification',
    id = 'Notification',
    customStyles = null,
  }) {
    const container = document.createElement('div')
    const text = document.createElement('span')
    container.setAttribute('id', id)
    text.textContent = message
    container.appendChild(text)

    const defaultStyles = [
      'fixed',
      'right-0',
      'bottom-0',
      'z-2',
      'w-full',
      'p-4',
      'bg-gray-1000/50',
      'text-center',
      'text-gray-50',
      'backdrop-blur-3xl',
      'transition-transform',
      'duration-200',
      'ease-in-out',
      'translate-y-full',
      'font-mono',
      'lg:bottom-0',
      'lg:right-2',
      'lg:w-auto',
      'lg:rounded-full',
      'lg:border-1',
      'lg:border-gray-600',
    ]

    const styles = new Set([...customStyles, ...defaultStyles])

    container.classList.add(...styles)
    return container
  }

  // Renderiza en pantalla un componente de notificación de tipo "error".
  function showErrorNotification(errorMessage) {
    let NotificationErrorComponent = ArticleLayout.querySelector('#NotificationError')
    // Nullish coalesing operator
    // Verifica si la variable es null o undefined si es asi, se le asignara el valor del lado derecho.
    // Es equivalente a -> if (NotificationErrorComponent === null || NotificationErrorComponent === undefined)
    NotificationErrorComponent ??= initNotificationComponent({
      message: errorMessage,
      id: 'NotificationError',
      customStyles: ['text-red-600'],
    })

    NotificationErrorComponent.classList.remove('lg:bottom-0')
    NotificationErrorComponent.classList.add('lg:bottom-2')
    NotificationErrorComponent.classList.remove('translate-y-full')

    // La notifiación solo se mostrara por 3s, y despues de 300ms se eliminara del DOM.
    setTimeout(() => {
      NotificationErrorComponent.classList.remove('lg:bottom-2')
      NotificationErrorComponent.classList.add('lg:bottom-0')
      NotificationErrorComponent.classList.add('translate-y-full')
    }, 3300)
  }

  // Renderiza en pantalla un componente de notificación de tipo "success" y se sincroniza con el componente tag.
  function showSuccessNotification(message) {
    let NotificationSuccessComponent = ArticleLayout.querySelector('#NotificationSuccess')

    NotificationSuccessComponent ??= initNotificationComponent({
      message: message,
      id: 'NotificationSuccess',
      customStyles: ['text-green-600'],
    })

    ArticleLayout.appendChild(NotificationSuccessComponent)

    copyButtonBadge.textContent = 'Copiado'
    copyButtonBadge.classList.remove('group-hover:lg:block')
    copyButtonBadge.classList.replace('hidden', 'block')
    copyButtonBadge.classList.replace('text-gray-50', 'text-green-600')

    NotificationSuccessComponent.classList.remove('lg:bottom-0')
    NotificationSuccessComponent.classList.add('lg:bottom-2')
    NotificationSuccessComponent.classList.remove('translate-y-full')

    setTimeout(() => {
      copyButtonBadge.textContent = originalTextBadge
      copyButtonBadge.classList.remove('text-green-600')
      copyButtonBadge.classList.replace('block', 'hidden')
      copyButtonBadge.classList.add('text-gray-50', 'group-hover:lg:block')
      NotificationSuccessComponent.classList.remove('lg:bottom-2')
      NotificationSuccessComponent.classList.add('lg:bottom-0')
      NotificationSuccessComponent.classList.add('translate-y-full')
    }, 3300)
  }

  // La function Throttle regula la cantidad de clicks del boton copiar.
  function throttle(callback, delay) {
    return function (...args) {
      isClickable = false

      callback(...args)

      setTimeout(() => {
        isClickable = true
      }, delay)
    }
  }

  function copyToClipboard() {
    if (!copyButton || !copyButtonBadge) return

    copyButton.addEventListener('click', async function () {
      if (isClickable) {
        try {
          if (!(navigator.clipboard && navigator.clipboard.writeText)) {
            throw Error('El navegador no es compatible con clipboard.')
          }

          await navigator.clipboard.writeText(codeData)
          throttle(showSuccessNotification, 3300)('Copiado al portapapeles')
        } catch (err) {
          throttle(showErrorNotification, 3300)(err.message)
        }
      }
    })
  }

  copyToClipboard()
</script>
