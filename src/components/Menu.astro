---
import MenuBar from './MenuBar.astro'
import MenuList from './MenuList.astro'
import type { MenuLink } from '@custom-types/global'

interface Props {
  links: MenuLink[]
  class?: string | null | undefined
}

const { links, class: className } = Astro.props
---

<div
  id='Menu'
  class:list={[
    'hidden left-0 top-0 right-0 z-[10] h-0 bg-gray-1000/50 backdrop-blur-3xl -translate-y-full',
    className,
  ]}>
  <div class='mx-auto h-full max-w-[1440px] flex flex-col lg:px-16 lg:py-8 xl:px-32'>
    <MenuBar />
    <MenuList links={links} />
  </div>
</div>

<script>
  import { syncLinkWithUrlPathName } from '@lib/dom/blog'
  import type { AstroNode, AstroNodeList } from '@custom-types/global'

  const menu: AstroNode = document.querySelector('#Menu')

  const menuOptions: AstroNodeList = menu?.querySelectorAll('a[data-menu-link-value]')
  const iconList: AstroNodeList = menu?.querySelectorAll('[data-icon-value]')

  syncLinkWithUrlPathName({ links: menuOptions, dataAttr: 'menuLinkValue' })

  const currentPathName = new URL(window.location.href).pathname.split('/')

  iconList?.forEach(icon => {
    const dataIcon = icon.dataset.iconValue ?? ''
    const isActive = currentPathName.includes(dataIcon)

    if (!isActive) {
      icon.classList.remove('block')
      icon.classList.add('hidden')
      return
    }

    if (dataIcon === 'blog') {
      const path = icon.querySelector('#BlogVector')
      if (!path) return

      icon.classList.replace('hidden', 'block')
      path.classList.add('lightning')
      return
    }

    if (dataIcon === 'portfolio') {
      icon.classList.replace('hidden', 'block')
      return
    }
  })

  menu?.addEventListener('contextmenu', e => {
    e.preventDefault()
    e.stopPropagation()
  })
</script>
