---
import { getCollection, getEntries } from 'astro:content'
import { Image } from 'astro:assets'
import BlogLayout from '@layouts/BlogLayout.astro'
import Link from '@components/Link.astro'
import CategoryFilter from '@components/CategoryFilters.astro'
import CardArticle from '@components/CardArticle.astro'
import WithoutContent from '@components/WithoutContent.astro'
import NoContent from '../../assets/nocontent-image.svg'

const pageTitle = 'allanjuarez.com | blog'

// Las content collections de Astro permiten recuperar datos de tres maneras:
// 1. getCollections() -> Obtiene una colección entera
// 2. getEntry() -> Recupera un elemento de una colección.
// 3. getEntries() -> Recupera uno o varios datos refenciados
const categories = (await getCollection('categories')).map(raw => raw.data)

async function getArticles() {
  const rawArticles = await getCollection('articles')
  const articles = rawArticles.map(async raw => {
    const rawAuthors = await getEntries(raw.data.authors)
    return {
      id: raw.id,
      data: {
        ...raw.data,
        authors: [...rawAuthors],
      },
    }
  })

  return Promise.allSettled(articles).then(results => results)
}

const allArticles = await getArticles()
---

<BlogLayout pageTitle={pageTitle}>
  <section class='sticky top-0 z-[8]'>
    <CategoryFilter categories={categories} />
  </section>
  <section class='relative px-4'>
    <Image id='NoContent' class='hidden' src={NoContent} alt='' />
    <div id='Content' class='flex flex-col gap-12 z-0 pb-16'>
      {
        allArticles &&
          allArticles.length !== 0 &&
          allArticles.map(results => {
            return results.status !== 'fulfilled' ? (
              <WithoutContent data-card-category={'no-content'} />
            ) : (
              <Link
                type='local'
                href={`/article/${results.value.id}`}
                class='hidden'
                data-card-category={results.value.data.category.id}>
                <CardArticle {...results.value.data} />
              </Link>
            )
          })
      }
    </div>
  </section>
</BlogLayout>

<script>
  import type { UrlChangeEventData } from '@custom-types/global'

  // La etiqueta "script" soporta typescript.
  enum CardState {
    HIDE = 'hidden',
    SHOW = 'block',
  }

  const cards = document.querySelectorAll('a[data-card-category], div[data-card-category]')

  // Reutilizable
  function checkVisibleCards(nodes: NodeListOf<Element>) {
    if (!nodes || nodes.length === 0) {
      return
    }

    const isDisabled = Array.from(nodes).every(node => node.classList.contains('hidden'))
    const component = document.querySelector('#NoContent')

    if (isDisabled) {
      console.log('Todos estan inactivos!')
      component?.classList.remove('hidden')
      component?.classList.add('block')
    } else {
      console.log('Hay uno o varios activos')
      component?.classList.remove('block')
      component?.classList.add('hidden')
    }
  }

  function setActiveClass(nodes: NodeListOf<Element>, currentFilter: string | null) {
    nodes.forEach(node => {
      const cardCategory = node.getAttribute('data-card-category')?.toLowerCase()

      if (!currentFilter || currentFilter === 'latest') {
        node.classList.replace(CardState.HIDE, CardState.SHOW)
        return
      }

      if (!currentFilter && currentFilter !== 'latest' && cardCategory === 'no-content') {
        node.classList.replace(CardState.SHOW, CardState.HIDE)
        return
      }

      if (currentFilter === cardCategory) {
        node.classList.replace(CardState.HIDE, CardState.SHOW)
        return
      }

      if (currentFilter !== cardCategory) {
        node.classList.replace(CardState.SHOW, CardState.HIDE)
        return
      }
    })
  }

  // Por defecto las etiquetas script en Astro esperan a que sea cargue todo el HTML, de esta manera no se necesita del evento "load"
  function syncActiveCardsByUrlParams() {
    const currentFilter = new URL(window.location).searchParams.get('category')
    setActiveClass(cards, currentFilter)
  }

  function syncUIByUrlParams(currentFilter: string | null) {
    setActiveClass(cards, currentFilter)
  }

  syncActiveCardsByUrlParams()
  checkVisibleCards(cards)

  window.addEventListener('changeUrl', e => {
    // Type assertion or Type cast
    const changeUrlEvent = e as CustomEvent<UrlChangeEventData>
    syncUIByUrlParams(changeUrlEvent.detail.payload)
    checkVisibleCards(cards)
  })
</script>
