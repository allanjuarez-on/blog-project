---
import { getCollection, getEntries } from 'astro:content'
import BlogLayout from '@layouts/BlogLayout.astro'
import Link from '@components/Link.astro'
import CategoryFilter from '@components/CategoryFilters.astro'
import CardArticle from '@components/CardArticle.astro'
import WithoutContent from '@components/WithoutContent.astro'

const pageTitle = 'allanjuarez.com | blog'

// Las content collections de Astro permiten recuperar datos de tres maneras:
// 1. getCollections() -> Obtiene una colección entera
// 2. getEntry() -> Recupera un elemento de una colección.
// 3. getEntries() -> Recupera uno o varios datos refenciados
const categories = (await getCollection('categories')).map(raw => raw.data)

async function getArticles() {
  const rawArticles = await getCollection('articles')
  const articles = rawArticles.map(async raw => {
    const rawAuthors = await getEntries(raw.data.authors)
    return {
      id: raw.id,
      data: {
        ...raw.data,
        authors: [...rawAuthors],
      },
    }
  })

  return Promise.allSettled(articles).then(results => results)
}

const allArticles = await getArticles()
// const allArticles = (await getArticles()).map((art, _, arr) => {
//   arr[0].status = 'rejected'
//   return art
// })
---

<BlogLayout pageTitle={pageTitle}>
  <div>
    <CategoryFilter categories={categories} />
  </div>
  <section>
    <h1 id="PageHeading">Lo último</h1>
    <div>
      {
        allArticles &&
          allArticles.length !== 0 &&
          allArticles.map(results => {
            return results.status !== 'fulfilled' ? (
              <WithoutContent />
            ) : (
              <Link
                type='local'
                href={`/article/${results.value.id}`}
                data-card-category={results.value.data.category.id}>
                <CardArticle {...results.value.data} />
              </Link>
            )
          })
      }
    </div>
  </section>
</BlogLayout>

<style>
  .show {
    display: block;
  }

  .hide {
    display: none;
  }
</style>

<script>
  interface UrlDataEvent {
    payload: string | null
  }

  function checkCurrentFilter() {
    const currentFilter = new URL(window.location).searchParams.get('category')
    const heading = document.querySelector('#PageHeading')
    const cards = document.querySelectorAll('a[data-card-category]')

    if(!currentFilter || currentFilter === 'latest') {
      heading.textContent = 'Lo último'
    }

    if(currentFilter && currentFilter !== 'latest') {
      heading.textContent = currentFilter
    }

    cards.forEach(node => {
      const cardCategory = node.getAttribute('data-card-category')?.toLowerCase()

      if (!currentFilter || currentFilter === 'latest') {
        node.classList.add('show')
        return
      }

      if (currentFilter === cardCategory) {
        node.classList.add('show')
        return
      }

      if (currentFilter !== cardCategory) {
        node.classList.add('hide')
        return
      }
    })
  }

  checkCurrentFilter()

  function updateUIByPayload(currentFilter: string | null) {
    const heading = document.querySelector('#PageHeading')
    const cards = document.querySelectorAll('a[data-card-category]')

    if(!currentFilter || currentFilter === 'latest') {
      heading.textContent = 'Lo último'
    }

    if(currentFilter && currentFilter !== 'latest') {
      heading.textContent = currentFilter
    }

    cards.forEach(node => {
      const cardCategory = node.getAttribute('data-card-category')?.toLowerCase()

      if (!currentFilter || currentFilter === 'latest') {
        node.classList.replace('hide', 'show')
        return
      }

      if (currentFilter === cardCategory) {
        node.classList.replace('hide', 'show')
        return
      }

      if (currentFilter !== cardCategory) {
        node.classList.replace('show', 'hide')
        return
      }
    })
  }

  window.addEventListener('changeUrl', e => {
    // Type assertion or Type cast
    const changeUrlEvent = e as CustomEvent<UrlDataEvent>
    updateUIByPayload(changeUrlEvent.detail.payload)
  })
</script>
